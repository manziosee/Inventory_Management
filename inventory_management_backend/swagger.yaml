openapi: 3.0.0
info:
  title: Inventory Management API
  version: 1.0.0
  description: API for managing inventory items, borrowings, damage reports, and user accounts.

servers:
  - url: http://localhost:5000
    description: Local development server
  - url: https://inventory_management_api.onrender.com
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer token is required to access protected routes.
  schemas:
    Item:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        quantity:
          type: integer
    Borrowing:
      type: object
      properties:
        id:
          type: string
        itemId:
          type: string
        userId:
          type: string
        borrowDate:
          type: string
          format: date
        returnDate:
          type: string
          format: date
        status:
          type: string
          enum: [borrowed, returned]
    DamageReport:
      type: object
      properties:
        id:
          type: string
        itemId:
          type: string
        description:
          type: string
        reportDate:
          type: string
          format: date
    User:
      type: object
      properties:
        id:
          type: string
        fullName:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [Program Manager, Inventory Manager]
        phoneNumber:
          type: string

paths:
  /api/items:
    post:
      summary: Create a new item
      tags: [Items]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        201:
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
    get:
      summary: Get a list of all items
      tags: [Items]
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'

  /api/items/{id}:
    get:
      summary: Get item by ID
      tags: [Items]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the item to retrieve
          required: true
          schema:
            type: string
      responses:
        200:
          description: Item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
    put:
      summary: Update an item
      tags: [Items]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the item to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        200:
          description: Item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
    delete:
      summary: Delete an item
      tags: [Items]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the item to delete
          required: true
          schema:
            type: string
      responses:
        204:
          description: Item deleted successfully

  /api/borrowings:
    post:
      summary: Create a new borrowing record
      tags: [Borrowings]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Borrowing'
      responses:
        201:
          description: Borrowing record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Borrowing'
    get:
      summary: Get a list of borrowings
      tags: [Borrowings]
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of borrowings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Borrowing'

  /api/borrowings/overdue:
    get:
      summary: Get overdue borrowings
      tags: [Borrowings]
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of overdue borrowings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Borrowing'

  /api/borrowings/{id}/return:
    put:
      summary: Mark an item as returned
      tags: [Borrowings]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the borrowing record to mark as returned
          required: true
          schema:
            type: string
      responses:
        200:
          description: Item marked as returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Borrowing'

  /api/damage-reports:
    post:
      summary: Create a new damage report
      tags: [Damage Reports]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DamageReport'
      responses:
        201:
          description: Damage report created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DamageReport'
    get:
      summary: Get all damage reports
      tags: [Damage Reports]
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of damage reports
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DamageReport'

  /api/damage-reports/{id}:
    put:
      summary: Update a damage report
      tags: [Damage Reports]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the damage report to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DamageReport'
      responses:
        200:
          description: Damage report updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DamageReport'

  /api/users:
    post:
      summary: Register a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fullName
                - email
                - password
                - phoneNumber
                - role
              properties:
                fullName:
                  type: string
                email:
                  type: string
                password:
                  type: string
                phoneNumber:
                  type: string
                role:
                  type: string
                  enum: [Program Manager, Inventory Manager]
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /api/users/login:
    post:
      summary: Authenticate user & get token
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: User authenticated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /api/users/profile:
    get:
      summary: Get user profile
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update user profile
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete user account
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        204:
          description: User account deleted successfully
